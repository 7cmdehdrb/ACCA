#!/usr/bin/env python
from __future__ import print_function

'''
erp42_drive_keyop.py:
    A ros keyboard teleoperation script for erp42 robots
'''

__author__ = 'Jin DaeJong'
__license__ = 'Unmanned Solution'
__maintainer__ = 'DJ JIN'
__email__ = 'djjin@unmansol.com'

import rospy
import roslib
from erp42_msgs.msg import CANCmdControl, CANFeedBack1, CANFeedBack2
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist
import sys, select, termios, tty
import thread
from numpy import clip

control_keys = {

#    'up'    : '\x41',
#    'down'  : '\x42',
    'right' : '\x43',
    'left'  : '\x44',
    ']'     : '\x5D',
    'backslash'  : '\x5C',
    'space' : '\x20',
    'tab'   : '\x09'
    }

key_bindings = {
    '\x41' : ( 1.0 , 0.0, 0),
    '\x42' : (-1.0 , 0.0, 0),
    '\x43' : ( 0.0 ,-1.0, 0),
    '\x44' : ( 0.0 , 1.0, 0),
    '\x5D' : ( 0.0 , 0.0, -1.0),
    '\x5C' : ( 0.0 , 0.0, 1.0),
    '\x20' : ( 0.0 , 0.0, 0.0),
    '\x09' : ( 0.0 , 0.0, 0.0)
    }

class ERP42DriveKeyop:
    def __init__(self, args):

        max_speed = 5 # m/s
        max_steering_angle = 20
        max_encoder = 65535

        cmd_vel_topic = '/cmd_vel'
        cmd_control_topic = '/erp42_can/command'
        encoder_topic = '/erp42_can/feedback2'

        self.speed_range = [0, float(max_speed)]
        self.steering_angle_range = [-float(max_steering_angle),
                                     float(max_steering_angle)]
        self.encoder_range = [0, int(max_encoder)]
        for key in key_bindings:
            key_bindings[key] = \
                    (key_bindings[key][0] * float(max_speed) / 10,
                     key_bindings[key][1] * float(max_steering_angle) / 10,
                     key_bindings[key][2] * int(max_encoder) / 65535)

        self.speed = 0
        self.steering_angle = 0
        self.encoder = 0
        self.cmd_pub = rospy.Publisher(
            cmd_control_topic, CmdControl, queue_size=1)
        self.encoder_pub = rospy.Publisher(
            encoder_topic, FeedBack2, queue_size=1)
        rospy.Timer(rospy.Duration(1.0/50.0), self.pub_callback, oneshot=False)
        self.print_state()
        self.key_loop()

    def pub_callback(self, event):
        erp42_cmd_msg = CmdControl()
        erp42_cmd_msg.KPH = self.speed
        erp42_cmd_msg.Deg = self.steering_angle
        self.cmd_pub.publish(erp42_cmd_msg)

        encoder_msg = FeedBack2()
        encoder_msg.encoder = self.encoder
        self.encoder_pub.publish(encoder_msg)

    def print_state(self):
        sys.stderr.write('\x1b[2J\x1b[H')
        rospy.loginfo('\x1b[1M\r*********************************************')
        rospy.loginfo('\x1b[1M\rUse arrows to change speed and steering angle')
        rospy.loginfo('\x1b[1M\rUse "]" to Encoder Decrease and "\\" to Increase')
        rospy.loginfo('\x1b[1M\rUse space to brake and tab to align wheels')
        rospy.loginfo('\x1b[1M\rPress <ctrl-c> or <q> to exit')
        rospy.loginfo('\x1b[1M\r*********************************************')
        rospy.loginfo('\x1b[1M\r'
                      '\033[34;1mSpeed: \033[32;1m%0.2f m/s\033[0m, '
                      '\033[34;1mSteer Angle: \033[32;1m%0.2f Deg\033[0m, '
                      '\033[34;1mEncoder : \033[32;1m%d ',
                      self.speed, self.steering_angle, self.encoder)

    def get_key(self):
        tty.setraw(sys.stdin.fileno())
        select.select([sys.stdin], [], [], 0)
        key = sys.stdin.read(1)
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.settings)
        return key


    def key_loop(self):
        self.settings = termios.tcgetattr(sys.stdin)
        while 1:
            key = self.get_key()
            if key in key_bindings.keys():
                if key == control_keys['space']:
                    self.speed = 0.0
                    self.encoder = 0
                elif key == control_keys['tab']:
                    self.steering_angle = 0.0
                else:
                    self.speed = self.speed + key_bindings[key][0]
                    self.steering_angle = \
                            self.steering_angle + key_bindings[key][1]
#                    self.encoder = self.encoder + key_bindings[key][0]
                    self.encoder = self.encoder + key_bindings[key][2]
                    self.speed = clip(
                        self.speed, self.speed_range[0], self.speed_range[1])
                    self.steering_angle = clip(
                        self.steering_angle,
                        self.steering_angle_range[0],
                        self.steering_angle_range[1])
                    self.encoder = clip(
                        self.encoder, self.encoder_range[0], self.encoder_range[1])

                self.print_state()
            elif key == '\x03' or key == '\x71':  # ctr-c or q
                break
            else:
                continue
        self.finalize()

    def finalize(self):
        rospy.loginfo('ERP42 Teleop Key Finished..')
        self.settings = termios.tcgetattr(sys.stdin)
        erp42_cmd_msg = CmdControl()
        erp42_cmd_msg.KPH = self.speed
        erp42_cmd_msg.Deg = self.steering_angle
        self.cmd_pub.publish(erp42_cmd_msg)
        sys.exit()

if __name__ == '__main__':
    rospy.init_node('erp42_drive_keyop_node')
    keyop = ERP42DriveKeyop(sys.argv[1:len(sys.argv)])
